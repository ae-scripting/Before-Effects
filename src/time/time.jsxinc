/**
* @fileoverview The Before Effects TIME helper module. This module adds methods
* that aid in working with time After EFfects.
* @author Collin D. Brooks <collin.brooks@gmail.com>
* @version 0.1.0 dev
*/

/**
 *Contains time helper methods that provide more functionality than the
 *original AE API.
 *@namespace
 *@extends BE
 *@see BE
 */
BE.provide('BE.time', "0.1.0 dev", function () {

    /**
     * A pointer to BE.time.
     */
    var that = this,
        /**
         * Helper function that returns the TimecodeDisplayType or
         * TimeDisplayType enum regardless of AE version.
         * @returns {TimecodeDisplayType|TimeDisplayType} A pointer to either
         * TimecodeDisplayType or TimeDisplayType depending on the user's AE
         * version. Useful for accessing the current display type without
         * having to check for AE version.
         */
        getTCD_Enum = function () {
            if (BE.AEVersion < 10.5) {
                return TimecodeDisplayType;
            } else {
                return TimeDisplayType;
            }
        },

        /**
         * TODO
         */
        getTCD = function () {
            if (BE.AEVersion < 10.5) {
                return app.project.timecodeDisplayType;
            } else {
                return app.project.timeDisplayType;
            }
        };

    /**
     * Gets the current Timecode Display Type based upon whether or not the
     * user's After Effects version is less than CS5.5 since the
     * timecodeDisplayType property of the project object was changed to
     * timeDisplayType in CS5.5.
     * @return {String} Returns "FRAMES" or "TIMECODE" depending upon what the
     * current timecode display type is.
     * TODO:
     *  Needs Feet and frames
     */
    this.getTimeDisplayType = function () {
        if (BE.AEVersion < 10.5) {
            return app.project.timecodeDisplayType;
        } else {
            return app.project.timeDisplayType;
        }
    };

    /**
     * Sets the TimecodeDisplayType (or TimeDisplayType) enum regardless of the
     * AE version the user is running.
     * @param {String} t The type of timecode display to use. Valid values are
     * "FRAMES" or "TIMECODE". For maximum usability, this value is not
     * case-sensitive.
     * @returns Nothing.
     * TODO:
     *  Needs to include Feet and frames.
     */
    this.setTimeDisplayType = function (t) {
        var d = getTCD();
        t = t.toLowerCase();

        if (t === "frames") {
            tcd = d.tcd_enum.FRAMES;
        } else if (t === "timecode") {
            tcd = d.tcd_enum.TIMECODE;
        }
    };

    //The display type enum is different starting with CS5.5. We'll use an
    //internal enum that is set based upon the current AE version.
    if (BE.AEVersion < 10.5) {
        this.TimeDisplayType = {
            FRAMES: TimecodeDisplayType.FRAMES,
            TIMECODE: TimecodeDisplayType.TIMECODE
        };
    } else {
        this.TimeDisplayType = {
            FRAMES: TimeDisplayType.FRAMES,
            TIMECODE: TimeDisplayType.TIMECODE
        };
    }

    /**
     * Grabs the time in seconds while maintaining the user's current timecode
     * settings.
     * @param {Comp} c The composition to get the current time in seconds from.
     * @returns {Float|Int} The time in seconds.
     */
    this.getTimeInSeconds = function (c) {
        return that.withTimecodeRemembered(that.TimeDisplayType.SECONDS,
            function () {
                return timeToCurrentFormat(c.time, c.frameRate, true);
            });
    };

    /**
     * Grabs the time in frames while maintaining the user's current timecode
     * settings.
     * @param {Comp} c The composition to get the current time in frames from.
     * @returns {String|Int} The time in seconds.
     */
    this.getTimeInFrames = function (c) {
        return that.withTimecodeRemembered(that.TimeDisplayType.FRAMES,
            function () {
                return timeToCurrentFormat(c.time, c.frameRate, true);
            });
    };

    /**
     * Runs a provided function after setting the timecode display type to the
     * provided setting; it then resets the user's timecode display type to
     * what it was originally set at.
     * @param {TimeDisplayType} t The TimeDisplayType enum to use.
     * @param {Function} f The function to run.
     * @returns The value returned by the provided function.
     */
    this.withTimecodeRemembered = function (t, f) {
        var userTime = getTimeDisplayType(),
            toReturn;

        app.project.timeDisplayType = t;
        toReturn = f();
        app.project.timeDisplayType = userTime;

        return toReturn;
    };

    return this;
});
