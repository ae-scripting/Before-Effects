/**
* @fileoverview The Before Effects TIME helper module. This module adds methods
* that aid in working with time After EFfects.
* @author Collin D. Brooks <collin.brooks@gmail.com>
* @version 0.1.0 dev
*/

/*jslint sloppy: true */

/**
 *Contains time helper methods that provide more functionality than the
 *original AE API.
 *@namespace
 *@extends BE
 *@see BE
 */
BE.provide('BE.time', "0.1.0 dev", function () {
    /**
     * A pointer to BE.time.
     */
    var that = this,
        TCD_enum = null,
        /**
         * Checks to make sure the given string is a valid option for the
         * setTCD function.
         * @param {String} t A string representing the type of timecode to use.
         * "TIMECODE" or "FRAMES". Case is not sensitive.
         * @returns {Bool} True if the given string is a valid timecode option.
         * Return is never seen if the given string is not valid because an
         * exception is raised.
         * @throws BE.time.error.ILLEGAL_TIMECODE_STRING.
         */
        validTCDString = function (t) {
            t = t.toLowerCase();

            if (t !== "frames" && t !== "timecode") {
                throw that.ERROR.ILLEGAL_TIMECODE_STRING;
            } else {
                return true;
            }
        },

        /**
         * Helper function that returns the TimecodeDisplayType or
         * TimeDisplayType enum regardless of AE version.
         * @returns {TimecodeDisplayType|TimeDisplayType} A pointer to either
         * TimecodeDisplayType or TimeDisplayType depending on the user's AE
         * version. Useful for accessing the current display type without
         * having to check for AE version.
         */
        getTCD_enum = function () {
            //If the TCD_enum has already been found... return.
            if (BE.isDefAndNotNull(TCD_enum)) {
                return TCD_enum;
            }

            TCD_enum = (BE.AEVersion < 10.5) ? TimecodeDisplayType : TimeDisplayType;
            return TCD_enum;
        },

        /**
         * Helper function that returns the project.TimecodeDisplayType or
         * project.TimeDisplayType value regardless of AE version.
         * @returns {app.project.TimecodeDisplayType|app.project.TimeDisplayType} A
         * pointer to either TimecodeDisplayType or TimeDisplayType depending
         * on the user's AE version. Useful for accessing the current display
         * type without having to check for AE version.
         * TODO:
         *  Needs Feet and frames
         */
        getTCD = function () {
            return (BE.AEVersion < 10.5) ?
                app.project.timecodeDisplayType :
                app.project.timeDisplayType;
        },

        /**
         * Sets the app.project.timecodeDisplayType or
         * app.project.timeDisplayType depending on whether or not the AE
         * version is less than 10.5 since the constant was changed.
         * @param {TimeDisplayType|TimecodeDisplayType} t The enum required to
         * change the time code display type.
         * @returns Nothing.
         */
        setTCD = function (t) {
            if (BE.AEVersion < 10.5) {
                app.project.timecodeDisplayType = t;
            } else {
                app.project.timeDisplayType = t;
            }
        };

    /**
     * Error object for the BE.time module.
     */
    this.ERROR = {
        ILLEGAL_TIMECODE_STRING: "An unrecognized time display string was given. Only \"frames\" or \"timecode\" are allowed.",
        ILLEGAL_TIMECODE_ENUM: "An unrecognized time display enum was given."
    };

    /**
     * Returns a string representation of the current timecode display type
     * regardless of the AE version.
     * @throws BE.time.error.ILLEGAL_TIMECODE_ENUM
     * @returns {String} "frames" if the project's timecode display type is
     * in frames or "timecode" if the project's timecode display type is in
     * seconds.
     */
    this.getTimeDisplayTypeString = function () {
        var toReturn,
            tcd = getTCD(),
            tcd_enum = getTCD_enum();
        if (tcd === tcd_enum.FRAMES) {
            toReturn = "frames";
        } else if (tcd === tcd_enum.TIMECODE) {
            toReturn = "timecode";
        } else {
            /** TODO: This error is thrown if feet and frames is the current
             * timecode
             */
            throw that.ERROR.ILLEGAL_TIMECODE_ENUM;
        }
        return toReturn;
    };

    /**
     * Checks to see if the current timecode display type is equal to the given
     * string regardless of the user's AE version.
     * @param {String} t The type of timecode to check agains the current
     * timecode display type. Either "FRAMES" or "TIMECODE". Case insensitive.
     * @throws BE.time.error.ILLEGAL_TIMECODE_STRING if given string is not a
     * valid timecode string.
     * @returns {Bool} True if the current timecode display type relates to the
     * given string. False if not.
     */
    this.timeDisplayTypeIs = function (t) {
        if (validTCDString(t)) {
            return (BE.time.getTimeDisplayTypeString() === t.toLowerCase()) ? true : false;
        } else {
            throw BE.time.error.ILLEGAL_TIMECODE_STRING;
        }
    };

    /**
     * Sets the TimecodeDisplayType (or TimeDisplayType) enum regardless of the
     * AE version the user is running.
     * @param {String} t The type of timecode display to use. Valid values are
     * "FRAMES" or "TIMECODE". For maximum usability, this value is not
     * case-sensitive.
     * @returns Nothing.
     * TODO:
     *  Needs to include Feet and frames.
     */
    this.setTimeDisplayType = function (t) {
        if (validTCDString(t)) {
            var d = getTCD_enum();

            t = t.toLowerCase();

            if (t === "frames") {
                setTCD(d.FRAMES);
            } else if (t === "timecode") {
                setTCD(d.TIMECODE);
            }
        }
    };

    /**
     * Runs a provided function after setting the timecode display type to the
     * provided setting; it then resets the user's timecode display type to
     * what it was originally set at.
     * @param {String} t "frames" | "timecode".
     * @param {Function} f The function to run.
     * @returns The value returned by the provided function.
     * @throws BE.time.error.ILLEGAL_TIMECODE_STRING
     */
    this.withTimecodeRemembered = function (t, f) {
        var time = BE.time,
            userTime,
            toReturn;

        if (validTCDString(t)) {
            userTime = time.getTimeDisplayTypeString();

            //Set time display type using given string.
            time.setTimeDisplayType(t);

            //Grab the return value from the user's function.
            toReturn = f();

            //Set the time display type back
            time.setTimeDisplayType(userTime);

            return toReturn;
        } else {
            throw time.error.ILLEGAL_TIMECODE_STRING;
        }
    };

    return this;
});
