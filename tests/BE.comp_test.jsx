/** * @fileoverview The script tests the functionality of the BE.comp object. * NOTE: It is assumed both TB and BE have been sourced. See * beforeeffects_tests.jsx to customize the overall BE test. * @author <a href="mailto:collin.brooks@gmail.com">Collin Brooks</a> * @version 0.1.0 dev */TB.module('BE.comp');BE.require('BE.comp');TB.test('BE.comp properties', function () {    TB.hasProperty(BE, "comp", "comp is a property of BE");    TB.hasProperty(BE.comp, "getLayerNames", "BE.comp.getLayerNames is a property of BE.comp");    TB.hasProperty(BE.comp, "getFilteredLayers", "BE.comp.getFilteredLayers is a property of BE.comp");    TB.hasProperty(BE.comp, "getAllSelectedProperties", "BE.comp.getAllSelectedProperties is a property of BE.comp");    TB.hasProperty(BE.time, "getTimeInSeconds", "BE.comp.getTimeInSeconds is a property of BE.comp");    TB.hasProperty(BE.time, "getTimeInFrames", "BE.comp.getTimeInFrames is a property of BE.comp");});TB.test('BE.comp.getLayerNames()', function () {    //Initialize the testConfig comp object    testConfig.comp.init();    var theComp = testConfig.comp.theComp,        testLayers = testConfig.comp.testLayers;    TB.deepEqual(        BE.comp.getLayerNames(theComp),        ["Camera 1", "Light 1", "Text 1", "Shape 1", "Null 1", "Solid 3", "Solid 2", "Solid 1"],        "Layer names are deeply equal!"    );    TB.deepEqual(        BE.comp.getLayerNames(theComp, "AVLayer"),        ["Null 1", "Solid 3", "Solid 2", "Solid 1"],        "AVLayer names are deeply equal!"    );    TB.deepEqual(        BE.comp.getLayerNames(theComp, "CameraLayer"),        ["Camera 1"],        "Camera layer filtered correctly!"    );    TB.deepEqual(        BE.comp.getLayerNames(theComp, "LightLayer"),        ["Light 1"],        "Light layer filtered correctly!"    );    //Clean up the testConfig comp object    testConfig.comp.clean();});TB.test('BE.comp.getFilteredLayers()', function () {    //Initialize the testConfig comp object    testConfig.comp.init();    var theComp = testConfig.comp.theComp,        testLayers = testConfig.comp.testLayers;    TB.equal(        BE.comp.getFilteredLayers(            theComp,            "AVLayer"        ).length,        [            testLayers["Null 1"],            testLayers["Solid 1"],            testLayers["Solid 2"],            testLayers["Solid 3"]        ].length,        "There are four 'AVLayers'"    );    TB.equal(        BE.comp.getFilteredLayers(            theComp,            "CameraLayer"        ).length,        [            testLayers["Camera 1"]        ].length,        "There is one 'CameraLayer'"    );    TB.equal(        BE.comp.getFilteredLayers(            theComp,            "LightLayer"        ).length,        [            testLayers["Light 1"]        ].length,        "There is one 'LightLayer'"    );    TB.equal(        BE.comp.getFilteredLayers(            theComp,            "ShapeLayer"        ).length,        [            testLayers["Shape 1"]        ].length,        "There is one 'ShapeLayer'"    );    TB.equal(        BE.comp.getFilteredLayers(            theComp,            "TextLayer"        ).length,        [            testLayers["Text 1"]        ].length,        "There is one 'TextLayer'"    );    TB.equal(        BE.comp.getFilteredLayers(            theComp,            "TextLayer"        ).length,        [            testLayers["Text 1"]        ].length,        "There is one 'TextLayer'"    );    //Clean up the testConfig comp object    testConfig.comp.clean();});//The BE.comp.getAllSelectedProperties method requires manual interaction to//test.TB.test('BE.comp.getAllSelectedProperties()', function () {    //Initialize the testConfig comp object    testConfig.comp.init();    var theComp = testConfig.comp.theComp,        testLayers = testConfig.comp.testLayers,        selectedProperties;    //Select some properties pragmatically to see if they are returned when    //using the getAllSelectedProperties method of the comp module    testLayers["Solid 1"].transform.position.setValue = [1,2];    testLayers["Solid 1"].transform.position.selected = true;    testLayers["Solid 2"].transform.scale.setValue = [3,4];    testLayers["Solid 2"].transform.scale.selected = true;    testLayers["Solid 3"].opacity.setValue = 5;    testLayers["Solid 3"].opacity.selected = true;    testLayers["Null 1"].opacity.setValue = 6;    testLayers["Null 1"].opacity.selected = true;    testLayers["Camera 1"].cameraOption.zoom.setValue = 7;    testLayers["Camera 1"].cameraOption.zoom.selected = true;    selectedProperties = BE.comp.getAllSelectedProperties(theComp);    TB.equal(selectedProperties.length, 5, "There were 5 selected properties!");    //For some reason, After Effects is returning the selected values in    //reverse order.    //Also, arrays must be compared using toSource().    TB.equal(        selectedProperties[4].selectedProperties[0].value.toSource(),        testLayers["Solid 1"].transform.position.value.toSource(),        "Solid 1's position property was found to be selected!"    );    TB.equal(        selectedProperties[3].selectedProperties[0].value.toSource(),        testLayers["Solid 2"].transform.scale.value.toSource(),        "Solid 2's scale property was found to be selected!"    );    TB.equal(        selectedProperties[2].selectedProperties[0].value,        testLayers["Solid 3"].opacity.value,        "Solid 3's opacity property was found to be selected!"    );    TB.equal(        selectedProperties[1].selectedProperties[0].value,        testLayers["Null 1"].opacity.value,        "Null 1's opacity property was found to be selected!"    );    TB.equal(        selectedProperties[0].selectedProperties[0].value,        testLayers["Camera 1"].cameraOption.zoom.value,        "Camera 1's cameraOpetions.zoom property was found to be selected!"    );    testConfig.comp.clean();});TB.test('BE.comp.getTimeInSeconds()', function () {    //Initialize the testConfig comp object    /*testConfig.comp.init();*/    /*var theComp = testConfig.comp.theComp,*/        /*testLayers = testConfig.comp.testLayers;*/    TB.ok(false, "TO DO!");    //Clean up the testConfig comp object    /*testConfig.comp.clean();*/});TB.test('BE.comp.getTimeInFrames()', function () {    //Initialize the testConfig comp object    /*testConfig.comp.init();*/    /*var theComp = testConfig.comp.theComp,*/        /*testLayers = testConfig.comp.testLayers;*/    TB.ok(false, "TO DO!");    //Clean up the testConfig comp object    /*testConfig.comp.clean();*/});