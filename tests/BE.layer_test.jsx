/** * @fileoverview The script tests the functionality of the BE.layer object. * NOTE: It is assumed both TB and BE have been sourced. See * beforeeffects_tests.jsx to customize the overall BE test. * @author <a href="mailto:collin.brooks@gmail.com">Collin Brooks</a> * @version 0.1.0 dev */TB.module('BE.layer');BE.require('BE.layer');BE.require('BE.time');TB.test('BE.layer properties', function () {    TB.hasProperty(BE, "layer", "layer is a property of BE");    TB.hasProperty(BE.layer, "addMarker", "BE.layer.addMarker is a property of BE.layer");    TB.hasProperty(BE.layer, "deleteMarker", "BE.layer.deleteMarker is a property of BE.layer");    TB.hasProperty(BE.layer, "findMarkerIndex", "BE.layer.findMarkerIndex is a property of BE.layer");    TB.hasProperty(BE.layer, "getMarkerTime", "BE.layer.getMarkerTime is a property of BE.layer");    TB.hasProperty(BE.layer, "getLayerInPoint", "BE.layer.getLayerInPoint is a property of BE.layer");    TB.hasProperty(BE.layer, "getLayerOutPoint", "BE.layer.getLayerOutPoint is a property of BE.layer");});TB.test('BE.layer methods', function () {    testConfig.layer.init();    var c = testConfig.comp.theComp,        l = testConfig.comp.testLayers["Solid 1"];    TB.equal(BE.layer.findMarkerIndex(l, "Solid 1 Marker 1"), 1, "The marker with the name 'Solid 1 Marker 1' should be at index 1.");    TB.equal(BE.layer.findMarkerIndex(l, "Solid 1 Marker 2"), 2, "The marker with the name 'Solid 1 Marker 2' should be at index 2.");    TB.equal(        BE.time.withTimecodeRemembered(            "timecode",            function () {                return BE.layer.getMarkerTime(l, 1);            }        ),        1,        "The marker at index 1 should be at 1 seconds"    );    TB.equal(        BE.time.withTimecodeRemembered(            "timecode",            function () {                return BE.layer.getMarkerTime(l, 2);            }        ),        2,        "The marker at index 2 should be at 2 seconds"    );    //Add a marker to the layer.    BE.layer.addMarker(l, 3, "New marker!");    TB.equal(BE.layer.findMarkerIndex(l, "New marker!"), 3, "The marker with the name 'New marker!' should be at index 3.");    TB.equal(        BE.time.withTimecodeRemembered(            "timecode",            function () {                return BE.layer.getMarkerTime(l, 3);            }        ),        3,        "The marker at index 3 should be at 3 seconds"    );    //Delete the markers from the first layer. Always delete index 1 because,    //when you delete a marker, the total number of markers decreases by 1. We    //created 3 markers so we're deleting the first marker 3 times.    BE.layer.deleteMarker(l, 1);    BE.layer.deleteMarker(l, 1);    BE.layer.deleteMarker(l, 1);    TB.equal(l.property("Marker").numKeys, 0, "The Solid 1 layer should not have anymore markers.");    testConfig.layer.clean();});